# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform CI/CD'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, qa, prod]  # Runs for all environments
    environment: ${{ matrix.environment }}

    defaults:
      run:
        shell: bash

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Azure Authentication (Using GitHub Secrets)
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Set up Python for Checkov
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 4: Install Terraform
    - name: Install Terraform
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform -y
        terraform --version

    # Step 5: Install TFLint
    - name: Install TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        tflint --version

    # Step 6: Install Checkov
    - name: Install Checkov
      run: pip install --upgrade checkov


    # Step 7: Run Checkov for Security Scanning
    - name: Run Checkov for QA
      if: matrix.environment == 'qa'
      run: |
        if [ -d "./qa" ]; then
          checkov -d ./qa --verbose
        else
          echo "Skipping Checkov: ./qa directory not found"
        fi

    - name: Run Checkov for Prod
      if: matrix.environment == 'prod'
      run: |
        if [ -d "./prod" ]; then
          checkov -d ./prod
        else
         echo "Skipping Checkov: ./prod directory not found"
        fi


    # Step 8: Set up Terraform with caching
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.7.0


    # Step 9: Initialize Terraform Backend
    - name: Terraform Init
      run: |
        terraform init -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
                       -backend-config="container_name=${{ secrets.CONTAINER_NAME }}" \
                       -backend-config="key=${{ matrix.environment }}.tfstate" \
                       -input=false -no-color

    # Step 10: Terraform Validate
    - name: Terraform Validate
      run: terraform validate -no-color

    # Step 11: Terraform Plan
    - name: Terraform Plan (${{ matrix.environment }})
      run: terraform plan -var-file=${{ matrix.environment }}/terraform.tfvars -out=tfplan.binary -no-color -input=false


    # Step 12: Convert Plan to JSON (For Cost Estimation)
    - name: Terraform Show
      run: terraform show -json tfplan.binary > plan.json

    # Step 13: Install Infracost
    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        infracost --version

    # Step 14: Run Infracost for Cost Estimation
    - name: Run Infracost (${{ matrix.environment }})
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      run: |
        infracost configure set api_key $INFRACOST_API_KEY
        infracost breakdown --path=plan.json --format=json --out-file=infracost-report.json

    # Step 15: Post Infracost Comment (Only for Pull Requests)
    - name: Post Infracost Comment
      if: github.event_name == 'pull_request'
      run: |
        infracost comment github --path=infracost-report.json \
        --repo=$GITHUB_REPOSITORY \
        --pull-request=${{ github.event.pull_request.number }} \
        --github-token=${{ secrets.GITHUB_TOKEN }}

    # Step 16: Apply Changes in Main Branch
    - name: Terraform Apply (${{ matrix.environment }})
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false tfplan.binary
