# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform Deployment

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, qa, prod]  # Sequential execution of environments

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Azure Login using GitHub Secrets (Service Principal)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SECRETS }}   # Make sure this secret is configured in GitHub

      # Step 3: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Terraform Initialization
      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=dem-storage-acc" \
                            -backend-config="container_name=dem-container" \
                            -backend-config="key=terraform.tfstate" \
                            -backend-config="resource_group_name=dem-resource-group"
        working-directory: ${{ matrix.environment }}

      # Step 5: Terraform Validation
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.environment }}

      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars
        working-directory: ${{ matrix.environment }}

      # Step 7: Terraform Apply (Only for QA and PROD)
      - name: Terraform Apply (Only for QA and PROD)
        if: matrix.environment != 'dev'
        run: terraform apply -auto-approve -var-file=terraform.tfvars
        working-directory: ${{ matrix.environment }}
